# Travis configuration
#
# Note: building Fortran code is not supported (yet): see https://docs.travis-ci.com/user/language-specific/
#       this is using C as a base and installs gfortran in the test environment
language: c

sudo: required

os: linux
compiler: gcc

env:
  global:
  - FC=gfortran
  - MPIFC=mpif90
  - CC=gcc
  - OMP_NUM_THREADS=2
  matrix:
  - TEST="" TESTCOV=0
  - TEST="--enable-debug" TESTCOV=0
  - TEST="--enable-debug --enable-double-precision" TESTCOV=0
  - TEST="--enable-vectorization --without-mpi" TESTCOV=0
  - TEST="--enable-vectorization --with-mpi" TESTCOV=1

before_install:
  # informations on git and commit
  - |
    echo "git version: "
    git --version
    echo "latest commit:"
    git rev-parse --verify HEAD
  # checks if changes occurred in folder src/ or setup/
  - |
    echo "request makes changes in folders: "; git diff-tree --name-only HEAD
    CHANGE=`git diff-tree --name-only HEAD | grep -E 'src|setup'`
    echo "check for change: $CHANGE"
    if [ "$CHANGE" == "" ]; then
      echo "no changes in src/ or setup/ folder, skipping testing..."
      exit 0
    fi
  # recommended for MPI projects to unset CC: see https://docs.travis-ci.com/user/languages/c
  #- test -n $CC && unset CC
  # updates repository
  - sudo apt-get update

install:
  - sudo apt-get install gfortran libgomp1 openmpi-bin libopenmpi-dev
  - echo "compiler versions:" ${FC} ${MPIFC} ${CC}
  - ${FC} --version
  - ${MPIFC} --version
  - ${CC} --version
  # python script needs numpy
  - sudo apt-get install -qq python-numpy #python-scipy

script:
  # setup info
  - |
    echo $TRAVIS_BUILD_DIR
    echo "configuration test:" ${TEST} ${TESTFLAGS}
  # bash function for checking seismogram output with reference solutions
  - my_test(){
    echo "testing seismograms:";
    ../../utils/compare_seismogram_correlations.py OUTPUT_FILES/ REF_SEIS/;
    ../../utils/compare_seismogram_correlations.py OUTPUT_FILES/ REF_SEIS/ | grep min/max | cut -d \| -f 3 | awk '{print "correlation:",$1; if ($1 < 0.9 ){print $1,"failed"; exit 1;}else{ print $1,"good"; exit 0;}}';
    }
  # test configuration
  - |
    if [ "$TESTCOV" == "1" ]; then
      ./configure FC=${FC} MPIFC=${MPIFC} CC=${CC} ${TEST} FLAGS_CHECK="-fprofile-arcs -ftest-coverage -O0"
    else
      ./configure FC=${FC} MPIFC=${MPIFC} CC=${CC} ${TEST}
    fi
  # compilation
  - make clean; make -j4 all
  # testing small example
  - |
    cd EXAMPLES/simple_topography_and_also_a_simple_fluid_layer/
    ./run_this_example.sh
    my_test
  # testing small example with mpi
  - |
    if [ "$TESTCOV" == "1" ]; then
      sed -i "s:^NPROC .*:NPROC    = 8:" DATA/Par_file
      ./run_this_example.sh
      my_test
    fi
  # done
  - cd ../../; echo `pwd`

# runs example
after_success:
  # code coverage
  - |
    if [ "$TESTCOV" == "1" ]; then
      gcov --version
      echo `pwd`
      ls -al obj/
    fi
  # produces coverage reports (done manually because of different naming for source & object files)
  - |
    if [ "$TESTCOV" == "1" ]; then
      find obj/ -iname '*.o' | sort | awk '{print "gcov -o obj/ "$1;}'
      # executes gcov-commands
      find obj/ -iname '*.o' | sort | awk '{print "gcov -o obj/ "$1;}' | sh
    fi
  # code coverage: see example https://github.com/codecov/example-fortran/blob/master/.travis.yml
  - if [ "$TESTCOV" == "1" ]; then bash <(curl -s https://codecov.io/bash) -X gcov; fi
