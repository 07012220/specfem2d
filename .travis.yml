# Travis configuration
#
# Note: building Fortran code is not supported (yet): see https://docs.travis-ci.com/user/language-specific/
#       this is using C as a base and installs gfortran in the test environment

language: c

sudo: required

os: linux
compiler: gcc

env:
  global:
    - FC=gfortran
    - MPIFC=mpif90
    - CC=gcc
    - OMP_NUM_THREADS=2

  matrix:
    # for test cases, we use
    #   TEST    - flags used for configuration
    #   TESTCOV - determines whether or not (0/1) code coverage flags are used

    # run default test
    - TEST="" TESTCOV=0

    # run debug
    - TEST="--enable-debug" TESTCOV=0

    # run debug & double precision
    - TEST="--enable-double-precision --enable-debug" TESTCOV=0

    # run vectorization
    - TEST="--enable-vectorization --without-mpi" TESTCOV=0

    # run vectorization & mpi, using code coverage flags
    - TEST="--enable-vectorization --with-mpi" TESTCOV=1

before_install:
  # informations on git
  - |
    git --version
    git rev-parse --verify HEAD
    git branch -a

  # checks if changes occurred in folders src/ or setup/
  - |
    echo "request: Branch($TRAVIS_BRANCH) Pull Request($TRAVIS_PULL_REQUEST) Tag($TRAVIS_TAG)"
    echo "commit : Commit($TRAVIS_COMMIT) Range($TRAVIS_COMMIT_RANGE)"

    # not working yet:
    #  git produces error:
    #  `fatal: ambiguous argument. .. unknown revision or path not in the working tree.`
    #
    # so far, we have no simple way yet to check where the changes occurred for this build
    # and if we have to actually perform code testing or not :(
    #
    # to skip testing: the commit message must contain [ci skip]

    # this fails...
    #git rev-list --oneline $TRAVIS_COMMIT_RANGE
    ## fixes triple-dot to double-dot range (see: https://github.com/travis-ci/travis-ci/issues/4596)
    #if [[ $TRAVIS_COMMIT_RANGE =~ "..." ]]; then
    #  RANGE=${TRAVIS_COMMIT_RANGE/.../..}
    #else
    #  RANGE=$TRAVIS_COMMIT_RANGE
    #fi
    ##RANGE1=`echo "$TRAVIS_COMMIT_RANGE" | awk '{n=split($1,a,".");print a[1]}'`
    ##RANGE2=`echo "$TRAVIS_COMMIT_RANGE" | awk '{n=split($1,a,".");print a[n]}'`
    #echo "request makes changes: $RANGE"
    #git diff-tree --name-only $RANGE
    #CHANGE=`git diff-tree --name-only $RANGE | grep -E 'src|setup'`
    #echo "check for change: $CHANGE"
    #if [ "$CHANGE" == "" ]; then
    #  echo "no changes in src/ or setup/ folder, skipping code testing..."
    #  exit 0
    #fi

  # recommended for MPI projects to unset CC: see https://docs.travis-ci.com/user/languages/c
  #- test -n $CC && unset CC

  # updates repository
  - sudo apt-get update

install:
  # fortran/openMPI compiler
  - sudo apt-get install gfortran libgomp1 openmpi-bin libopenmpi-dev

  # python script needs numpy
  - sudo apt-get install -qq python-numpy #python-scipy

  # version infos
  - echo "compiler versions:" ${FC} ${MPIFC} ${CC}
  - ${FC} --version
  - ${MPIFC} --version
  - ${CC} --version

script:
  ###########################################################
  # setup
  ###########################################################
  # info
  - |
    echo $TRAVIS_BUILD_DIR
    echo "configuration test:" ${TEST} ${TESTFLAGS}

  # bash function for checking seismogram output with reference solutions
  - my_test(){
    echo "testing seismograms:";
    ../../utils/compare_seismogram_correlations.py OUTPUT_FILES/ REF_SEIS/;
    ../../utils/compare_seismogram_correlations.py OUTPUT_FILES/ REF_SEIS/ | grep min/max | cut -d \| -f 3 | awk '{print "correlation:",$1; if ($1 < 0.9 ){print $1,"failed"; exit 1;}else{ print $1,"good"; exit 0;}}';
    }

  ###########################################################
  # configuration & compilation
  ###########################################################
  # configuration
  - |
    if [ "$TESTCOV" == "1" ]; then
      ./configure FC=${FC} MPIFC=${MPIFC} CC=${CC} ${TEST} FLAGS_CHECK="-fprofile-arcs -ftest-coverage -O0"
    else
      ./configure FC=${FC} MPIFC=${MPIFC} CC=${CC} ${TEST}
    fi

  # compilation
  - make clean; make -j4 all

  ###########################################################
  # test examples
  ###########################################################
  # testing internal mesher example (short & quick for all configuration)
  - |
    cd EXAMPLES/simple_topography_and_also_a_simple_fluid_layer/
    ./run_this_example.sh
    my_test
    cd ../../

  # testing example with pml (longer testing only together with mpi and code coverage)
  - |
    if [ "$TESTCOV" == "1" ]; then
      cd EXAMPLES/semi_infinite_homogeneous/
      sed -i "s:^NPROC .*:NPROC    = 4:" DATA/Par_file
      ./run_this_example.sh
      my_test
      cd ../../
    fi

  # testing external mesher example with mpi and stacey
  - |
    if [ "$TESTCOV" == "1" ]; then
      cd EXAMPLES/Gmsh_example_Stacey_MPI/
      sed -i "s:^NPROC .*:NPROC    = 4:" DATA/Par_file
      ./run_this_example.sh
      my_test
      cd ../../
    fi

  # done
  - echo `pwd`

after_success:
  ###########################################################
  # code coverage
  ###########################################################
  - |
    if [ "$TESTCOV" == "1" ]; then
      gcov --version
      echo `pwd`
      ls -al obj/
    fi

  # produces coverage reports (done manually because of different naming for source & object files)
  - |
    if [ "$TESTCOV" == "1" ]; then
      find obj/ -iname '*.o' | sort | awk '{print "gcov -o obj/ "$1;}'
      # executes gcov-commands
      find obj/ -iname '*.o' | sort | awk '{print "gcov -o obj/ "$1;}' | sh
    fi

  # code coverage: see example https://github.com/codecov/example-fortran/blob/master/.travis.yml
  - if [ "$TESTCOV" == "1" ]; then bash <(curl -s https://codecov.io/bash) -X gcov; fi
